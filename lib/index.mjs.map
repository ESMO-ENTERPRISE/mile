{"version":3,"file":"index.mjs","sources":["../src/build.ts","../src/constants.ts","../src/json.ts","../src/loader.ts","../src/logger.ts","../src/process.ts","../src/handlers.ts","../src/cli.ts"],"sourcesContent":["import terser from \"@rollup/plugin-terser\";\nimport typescript from \"@rollup/plugin-typescript\";\nimport { readFileSync } from \"fs\";\nimport path from \"path\";\nimport { RollupBuild, RollupOptions } from \"rollup\";\nimport { dts } from \"rollup-plugin-dts\";\nimport { BuildOptions } from \"./options\";\n\nexport const buildPreBundleConfig = (options: BuildOptions): RollupOptions => ({\n    input: options.input,\n    external: (id: any) => !/^[./]/.test(id),\n    logLevel: 'silent'\n})\n\nexport const buildBundleConfig = (options: BuildOptions) => {\n    const config: any[] = [];\n    const json = JSON.parse(readFileSync(path.resolve(process.cwd(), 'package.json')).toString());\n\n    if (options.typescript)\n        config.push({\n            plugins: [dts()],\n            file: `${path.join(process.cwd(), options.output, json.name)}.d.ts`,\n            format: 'es',\n        })\n    \n    if (options.format.includes(\"cjs\"))\n        config.push({\n            file: `${path.join(process.cwd(), options.output, json.name)}.js`,\n            format: 'cjs',\n            sourcemap: options.sourcemap,\n            mimify: options.mimify,\n            plugins: [typescript(), terser()]\n        })\n\n    if (options.format.includes(\"esm\"))\n        config.push({\n            file: `${path.join(process.cwd(), options.output, json.name)}.mjs`,\n            format: 'es',\n            sourcemap: options.sourcemap,\n            mimify: options.mimify,\n            plugins: [typescript(), terser()]\n        })\n\n    return config;\n}\n\nexport async function generateOutputs(bundle: RollupBuild, options: any[]) {\n    for (const outputOptions of options) {\n        await bundle.write(outputOptions);\n    }\n}\n\n","export const SOURCE_DIRECTORY_NAME = 'src';\nexport const TYPESCRIPT_CONFIG_FILE = 'tsconfig.json';\nexport const MILEFU_CONFIG_FILE = 'milefu.config.js';\nexport const PACKAGE_JSON_CONFIG_FILE = 'package.json';\n\nexport const MESSAGES = {\n  APPLICATION_NAME_QUESTION: `What is the name of your application?`,\n  PACKAGE_MANAGER_QUESTION: `Which package manager would you ðŸ’™ to use?`,\n  PACKAGE_MANAGER_ERROR: 'Package manager selected is not installed',\n  PACKAGE_MANAGER_NPM: 'npm',\n  PACKAGE_MANAGER_YARN: 'yarn',\n  PACKAGE_MANAGER_PNPM: 'pnpm',\n  PROJECT_CREATION_STATUS: (name: string) => `Creating project ${name}`,\n  PROJECT_CREATION_SUCCESS: (name: string) => `Project ${name} created. Files: ${MILEFU_CONFIG_FILE}, ${TYPESCRIPT_CONFIG_FILE}, ${PACKAGE_JSON_CONFIG_FILE} added or changed`,\n  PROJECT_BUILD_STATUS: `Building project with options included in ${MILEFU_CONFIG_FILE}`,\n  PROJECT_BUILD_ERROR: (error: string) => `Cannot build project. ${error}`,\n  PROJECT_BUILD_SUCCESS: 'Project built successfully',\n  RUNNER_EXECUTION_ERROR: (command: string) => `\\nFailed to execute command: ${command}`,\n}\n\nexport const TYPESCRIPT_CONFIG_TEMPLATE = `\n{\n    \"include\": [\"src\", \"rollup.config.ts\"],\n    \"compilerOptions\": {\n        \"target\": \"ES6\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,\n        \"declaration\": true /* Generates corresponding '.d.ts' file. */,\n        \"outDir\": \"lib\" /* Redirect output structure to the directory. */,\n        \n        /* Strict Type-Checking Options */\n        \"strict\": true /* Enable all strict type-checking options. */,\n        \"noImplicitAny\": true /* Raise error on expressions and declarations with an implied 'any' type. */,\n        \"strictNullChecks\": true /* Enable strict null checks. */,\n        \"strictFunctionTypes\": true /* Enable strict checking of function types. */,\n        \"strictBindCallApply\": true /* Enable strict 'bind', 'call', and 'apply' methods on functions. */,\n        \"strictPropertyInitialization\": true /* Enable strict checking of property initialization in classes. */,\n        \"noImplicitThis\": true /* Raise error on 'this' expressions with an implied 'any' type. */,\n        \"alwaysStrict\": true /* Parse in strict mode and emit \"use strict\" for each source file. */,\n\n        /* Additional Checks */\n        \"noUnusedLocals\": true /* Report errors on unused locals. */,\n        \"noUnusedParameters\": true /* Report errors on unused parameters. */,\n        \"noImplicitReturns\": true /* Report error when not all code paths in function return a value. */,\n        \"noFallthroughCasesInSwitch\": true /* Report errors for fallthrough cases in switch statement. */,\n        \"noUncheckedIndexedAccess\": true /* Include 'undefined' in index signature results */,\n\n        /* Module Resolution Options */\n        \"moduleResolution\": \"node\" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,\n        \"resolveJsonModule\": true,\n        \"allowSyntheticDefaultImports\": true /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */,\n        \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\n        \n        /* Advanced Options */\n        \"skipLibCheck\": true /* Skip type checking of declaration files. */,\n        \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */\n    }\n  }\n`;\n\nexport const MILEFU_CONFIG_TEMPLATE = `module.exports = {\n  format: ['esm', 'cjs'],\n  output: 'lib',\n  input: 'src/index.ts',\n  sourcemap: true,\n  typescript: true,\n  mimify: true\n}\n`\n\nexport const INDEX_FILE_TEMPLATE = `\nconst app = () => {\n  console.log('Hello World');\n}\n\napp();\n`","import jsonfile from 'jsonfile';\n\nexport const editPackageJson = ({\n    parent,\n    key,\n    value,\n    force\n}: {\n    parent?: string,\n    key: string,\n    value: string,\n    force?: boolean\n}) => {\n    force = force || false;\n\n    try {\n        let packaged = jsonfile.readFileSync('package.json')\n        if (parent) {\n            if (!packaged[parent]) {\n                packaged[parent] = {}\n            }\n            if (!force && packaged[parent][key]) {\n                const message = `Attempted to update ` + parent + '.' + key + ` with \"` + value + `\"`\n                throw new Error(message)\n            }\n\n            packaged[parent][key] = value.replace(/\\+/g, ' ');\n        } else {\n            packaged[key] = value.replace(/\\+/g, ' ');\n        }\n\n        jsonfile.writeFileSync('package.json', packaged, { spaces: 4 })\n    } catch (e) {\n        process.stdout.write('An exception occurred:\\n')\n        if (e instanceof Error) process.stdout.write('    ' + e.message)\n        process.stdout.write('\\n')\n        process.exit(1)\n    }\n}\n","import ora, {Ora, Spinner} from \"ora\";\n\nexport class Loader {\n    private static instance: Loader;\n    private ora: Ora;\n\n    private constructor() {\n        this.ora = ora();\n    }\n\n    public static getInstance() {\n        if (!Loader.instance)\n            return new Loader();\n\n        return Loader.instance;\n    }\n\n    public start() {\n        this.ora.start();\n    }\n\n    public stop() {\n        this.ora.stop();\n    }\n\n    public info(text: string) {\n        this.ora.info(text);\n    }\n\n    public success(text: string) {\n        this.ora.info(this.ora.text);\n        this.ora.succeed(text);\n    }\n\n    public error(text: string) {\n        this.ora.fail(text);\n    }\n\n    public setText(text: string) {\n        this.ora.text = text;\n    }\n\n    public setSpinner(spinner: Spinner) {\n        this.ora.spinner = spinner;\n    }\n}","import { Logger } from 'tslog'\n\nexport const logger = new Logger({})\n","import { ChildProcess, SpawnOptions, spawn } from \"child_process\";\n\nimport { MESSAGES } from \"./constants\";\nimport { logger } from \"./logger\";\n\nexport const run = async (command: string, args: string[], collect = false): Promise<null | string> => {\n    const cwd: string = process.cwd();\n    const options: SpawnOptions = {\n        cwd,\n        stdio: collect ? 'pipe' : 'inherit',\n        shell: true,\n    };\n    return new Promise<null | string>((resolve, reject) => {\n        const child: ChildProcess = spawn(command, [...args], options);\n        if (collect) {\n            child.stdout!.on('data', (data) =>\n                resolve(data.toString().replace(/\\r\\n|\\n/, '')),\n            );\n            child.stderr!.on('data', () => {\n                logger.error(MESSAGES.PACKAGE_MANAGER_ERROR);\n            })\n        }\n        child.on('close', (code) => {\n            if (code === 0) {\n                resolve(null);\n            } else {\n                logger.error(MESSAGES.RUNNER_EXECUTION_ERROR(`${command}`));\n                reject();\n                process.exit(1);\n            }\n        });\n    });\n}\n","import { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport inquirer from 'inquirer';\nimport path from 'path';\nimport { RollupBuild, rollup } from 'rollup';\n\nimport { buildBundleConfig, buildPreBundleConfig, generateOutputs } from './build';\nimport { INDEX_FILE_TEMPLATE, MESSAGES, MILEFU_CONFIG_FILE, MILEFU_CONFIG_TEMPLATE, SOURCE_DIRECTORY_NAME, TYPESCRIPT_CONFIG_FILE, TYPESCRIPT_CONFIG_TEMPLATE } from './constants';\nimport { editPackageJson } from './json';\nimport { Loader } from './loader';\nimport { logger } from './logger';\nimport { BuildOptions } from './options';\nimport { run } from './process';\n\n// init typescript project, and install mile\nexport const init = async () => {\n    const { pm } = await inquirer.prompt({\n        name: 'pm',\n        type: 'list',\n        message: MESSAGES.PACKAGE_MANAGER_QUESTION,\n        choices: [MESSAGES.PACKAGE_MANAGER_NPM, MESSAGES.PACKAGE_MANAGER_YARN, MESSAGES.PACKAGE_MANAGER_PNPM]\n    });\n\n    const { name } = await inquirer.prompt({\n        name: 'name',\n        type: 'input',\n        message: MESSAGES.APPLICATION_NAME_QUESTION,\n        default: path.basename(process.cwd())\n    });\n\n    const sources: Record<string, () => void> = {\n        'npm': async () => {\n            await run(/^win/.test(process.platform) ? 'npm.cmd' : 'npm', ['-v']);\n            await run('npm', ['init', '--y'], true);\n            // await run('npm', ['install', '@vira/milefu', '-D'], true);\n        },\n        'pnpm': async () => {\n            // await run(/^win/.test(process.platform) ? 'pnpm.cmd' : 'pnpm', ['-v']);\n            await run('pnpm', ['init'], true);\n            // await run('pnpm', ['install', '@vira/milefu', '-D'], true);\n            // await run('pnpm', ['install', 'typescript', '-D'], true);\n        },\n        'yarn': async () => {\n            await run(/^win/.test(process.platform) ? 'yarn.cmd' : 'yarn', ['-v']);\n            await run('yarn', ['init', '-y'], true);\n            // await run('yarn', ['install', '@vira/milefu', '-D'], true);\n        },\n    };\n\n    const spinner = Loader.getInstance();\n    spinner.setText(MESSAGES.PROJECT_CREATION_STATUS(name));\n    spinner.start();\n\n    if (existsSync('package.json')) logger.warn('A package.json already exists')\n    const promise = new Promise<void>((resolve) => {\n        resolve(sources[pm as string]())\n    })\n\n    await promise\n\n    editPackageJson({ key: 'name', value: name, force: true })\n    editPackageJson({ parent: 'scripts', key: 'build', value: 'npx milefu build' })\n    editPackageJson({ key: 'main', value: `lib/${name}.mjs` })\n    editPackageJson({ key: 'module', value: `lib/${name}.mjs` })\n    editPackageJson({ key: 'typings', value: `lib/${name}.d.ts` })\n\n    if (!existsSync(TYPESCRIPT_CONFIG_FILE)) writeFileSync(TYPESCRIPT_CONFIG_FILE, TYPESCRIPT_CONFIG_TEMPLATE);\n    if (!existsSync(MILEFU_CONFIG_FILE)) writeFileSync(MILEFU_CONFIG_FILE, MILEFU_CONFIG_TEMPLATE);\n    if (!existsSync(SOURCE_DIRECTORY_NAME)) {\n        mkdirSync(SOURCE_DIRECTORY_NAME)\n        writeFileSync('src/index.ts', INDEX_FILE_TEMPLATE);\n    }\n\n    spinner.success(MESSAGES.PROJECT_CREATION_SUCCESS(name));\n}\n\nexport const build = async () => {\n    let bundle: RollupBuild;\n    let buildFailed = false;\n    const spinner = Loader.getInstance();\n\n    try {\n        spinner.setText(MESSAGES.PROJECT_BUILD_STATUS);\n        spinner.start();\n\n        const options: BuildOptions = JSON.parse(JSON.stringify(await import(path.resolve(process.cwd(), MILEFU_CONFIG_FILE)))).default;\n        // create a bundle\n        bundle = await rollup(buildPreBundleConfig(options));\n\n        await generateOutputs(bundle, buildBundleConfig(options));\n\n        if (bundle) {\n          // closes the bundle\n          await bundle.close();\n        }\n    } catch (error) {\n        buildFailed = true;\n\n        if (error instanceof Error) spinner.error(error.message)\n    }\n\n    spinner.success(MESSAGES.PROJECT_BUILD_SUCCESS);\n    process.exit(buildFailed ? 1 : 0);\n}\n\n","#! /usr/bin/env node\n\nimport figlet from 'figlet';\nimport { Command, OptionValues } from 'commander';\nimport { build, init } from './handlers';\n\nconst getHandler = (options: OptionValues) => {\n    const handlers: Record<string, () => void> = {\n        'init': () => init(),\n        'build': () => build()\n    };\n\n    Object.keys(options).forEach(option => handlers[option as string]());\n}\n\nconst cli = () => {\n    console.log(figlet.textSync('MILE'))\n\n    const program = new Command();\n\n    program\n        .version('0.0.1')\n        .description('The simplest and fastest way to bundle your TypeScript libraries')\n        .option('-i, --init', 'Initialize project with default config')\n        .option('-b, --build', 'Build project based on milefu.config.js')\n        .parse(process.argv);\n\n    getHandler(program.opts<{ init: string }>());\n\n    if (!process.argv.slice(2).length)\n        program.outputHelp();\n}\n\nexport default cli();\n"],"names":["__async"],"mappings":"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"}